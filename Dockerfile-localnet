ARG BASE_IMAGE=ubuntu:latest

FROM $BASE_IMAGE AS builder

ARG TARGETARCH
RUN echo ">>> Building for $TARGETARCH"

SHELL ["/bin/bash", "-c"]

# Set noninteractive mode for apt-get
ARG DEBIAN_FRONTEND=noninteractive

LABEL ai.opentensor.image.authors="operations@opentensor.ai" \
  ai.opentensor.image.vendor="Opentensor Foundation" \
  ai.opentensor.image.title="opentensor/subtensor-localnet" \
  ai.opentensor.image.description="Opentensor Subtensor Blockchain" \
  ai.opentensor.image.documentation="https://docs.bittensor.com"

# Copy repo first (you want this *before* RUN to enable layer cache reuse)
COPY . /build
WORKDIR /build

# Set up env var
ARG BUILT_IN_CI
ENV BUILT_IN_CI=${BUILT_IN_CI}
ENV RUST_BACKTRACE=1
ENV PATH="/root/.cargo/bin:${PATH}"

## Ubdate certificates
RUN apt-get update && apt-get install -y ca-certificates

# Echo the value
RUN echo "[*] BUILT_IN_CI=$BUILT_IN_CI"
# Install deps if $BUILT_IN_CI wasn't passed
# BUILD_TRIPLE are located on `.github/workflows/docker-localnet.yml` in a job `build:matrix:platform:triple`
# If these are updated in the workflow, then we need to update here in `elif [ -d "/build/ci_target" ]` section.
# We substitute the related binaries for the required Docker image layer architecture.
RUN if [ -z "$BUILT_IN_CI" ]; then \
      echo "[*] Installing env and building binaries..." && \
      chmod +x ./scripts/install_build_env.sh && \
      ./scripts/install_build_env.sh && \
      ./scripts/localnet.sh --build-only && \
      ./scripts/localnet.sh False --build-only ; \
    elif [ -d "/build/ci_target" ]; then \
      echo "[*] BUILT_IN_CI is set â†’ using prebuilt binaries." && \
      \
      echo "[*] Mapping TARGETARCH=$TARGETARCH to Rust triple..." && \
      if [ "$TARGETARCH" = "amd64" ]; then \
        export BUILD_TRIPLE="x86_64-unknown-linux-gnu"; \
      elif [ "$TARGETARCH" = "arm64" ]; then \
        export BUILD_TRIPLE="aarch64-unknown-linux-gnu"; \
      else \
        echo "[!] Unknown TARGETARCH: $TARGETARCH" && exit 1; \
      fi && \
      echo "[*] Using BUILD_TRIPLE=$BUILD_TRIPLE" && \
      \
      echo "[*] Copying binaries to expected /build/target layout..." && \
      for RUNTIME in fast-runtime non-fast-runtime; do \
        mkdir -p /build/target/${RUNTIME}/release/wbuild/node-subtensor-runtime && \
        cp -v /build/ci_target/${RUNTIME}/${BUILD_TRIPLE}/release/node-subtensor /build/target/${RUNTIME}/release/node-subtensor && \
        cp -v /build/ci_target/${RUNTIME}/${BUILD_TRIPLE}/release/wbuild/node-subtensor-runtime/node_subtensor_runtime.compact.compressed.wasm \
              /build/target/${RUNTIME}/release/wbuild/node-subtensor-runtime/node_subtensor_runtime.compact.compressed.wasm ; \
      done ; \
    else \
      echo "[!] BUILT_IN_CI is set but /build/ci_target not found. Exiting." && exit 1 ; \
    fi

# Verify the binaries was produced
RUN test -e /build/target/fast-runtime/release/node-subtensor
RUN test -e /build/target/non-fast-runtime/release/node-subtensor

FROM $BASE_IMAGE AS subtensor-localnet

# Copy binaries
COPY --from=builder /build/target/fast-runtime/release/node-subtensor target/fast-runtime/release/node-subtensor
RUN chmod +x target/fast-runtime/release/node-subtensor

COPY --from=builder /build/target/non-fast-runtime/release/node-subtensor target/non-fast-runtime/release/node-subtensor
RUN chmod +x target/non-fast-runtime/release/node-subtensor

COPY --from=builder /build/snapshot.json /snapshot.json

COPY --from=builder /build/scripts/localnet.sh scripts/localnet.sh
RUN chmod +x /scripts/localnet.sh

# Copy WebAssembly artifacts
COPY --from=builder /build/target/fast-runtime/release/wbuild/node-subtensor-runtime/node_subtensor_runtime.compact.compressed.wasm target/fast-runtime/release/node_subtensor_runtime.compact.compressed.wasm
COPY --from=builder /build/target/non-fast-runtime/release/wbuild/node-subtensor-runtime/node_subtensor_runtime.compact.compressed.wasm target/non-fast-runtime/release/node_subtensor_runtime.compact.compressed.wasm

# Update certificates for next layer
RUN apt-get update && apt-get install -y ca-certificates

# Do not build (just run)
ENV BUILD_BINARY=0
# Switch to local run with IP 0.0.0.0 within docker image
ENV RUN_IN_DOCKER=1
# Expose ports
EXPOSE 30334 30335 9944 9945

ENTRYPOINT ["/scripts/localnet.sh"]
# Fast blocks defaults to True, you can disable it by passing False to the docker command, e.g.:
# docker run ghcr.io/opentensor/subtensor-localnet False
CMD ["True"]
