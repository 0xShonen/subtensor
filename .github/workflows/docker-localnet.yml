name: Publish Localnet Docker Image

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      branch-or-tag:
        description: "The branch or tag to use as the Docker image tag (optional)."
        required: false
        default: ""
  push:
    branches:
      - devnet-ready
      - main
      - testnet
      - devnet

concurrency:
  group: docker-localnet-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write
  actions: read
  security-events: write

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.vars.outputs.tag }}
      ref: ${{ steps.vars.outputs.ref }}
      latest_tag: ${{ steps.vars.outputs.latest_tag }}
    steps:
      - name: Determine Docker tag and ref
        id: vars
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "ref=${{ github.head_ref }}" >> $GITHUB_OUTPUT
            echo "tag=${{ github.base_ref }}" >> $GITHUB_OUTPUT
          else
            tag="${{ github.event.inputs.branch-or-tag || github.ref_name }}"
            echo "ref=${{ github.ref_name }}" >> $GITHUB_OUTPUT
            echo "tag=$tag" >> $GITHUB_OUTPUT
          fi
      
          if [[ "$tag" != "devnet-ready" ]]; then
            echo "latest_tag=true" >> $GITHUB_OUTPUT
          else
            echo "latest_tag=false" >> $GITHUB_OUTPUT
          fi

  # build artifacts for fast-runtime and non-fast-runtime
  build:
    needs: setup
    strategy:
      matrix:
        runtime: ["fast-runtime", "non-fast-runtime"]
    runs-on: [self-hosted, cax41]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.setup.outputs.ref }}

      - name: Install rust + dependencies
        run: |
          chmod +x ./scripts/install_build_env.sh
          ./scripts/install_build_env.sh

      - name: Patch limits for local run
        run: |
          chmod +x ./scripts/localnet_patch.sh
          ./scripts/localnet_patch.sh

      - name: Build binaries
        run: |
          export PATH="$HOME/.cargo/bin:$PATH"
          if [ "${{ matrix.runtime }}" = "fast-runtime" ]; then
            ./scripts/localnet.sh --build-only
          else
            ./scripts/localnet.sh False --build-only
          fi

      - name: Prepare artifacts for upload
        run: |
          mkdir -p upload
          cp -v snapshot.json upload/ || true
          cp -v scripts/localnet.sh upload/ || true
          cp -v target/${{ matrix.runtime }}/release/node-subtensor upload/node-subtensor || true
          cp -v target/${{ matrix.runtime }}/release/wbuild/node-subtensor-runtime/node_subtensor_runtime.compact.compressed.wasm upload/ || true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artifacts-${{ matrix.runtime }}
          path: upload/

  # Collect all artifacts and publish them to docker repo
  publish:
    needs: [setup, build]

    runs-on: [self-hosted, cax41]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.setup.outputs.ref }}

      - name: Download fast-runtime artifacts
        uses: actions/download-artifact@v4
        with:
          name: artifacts-fast-runtime
          path: bin/fast-runtime

      - name: Download non-fast-runtime artifacts
        uses: actions/download-artifact@v4
        with:
          name: artifacts-non-fast-runtime
          path: bin/non-fast-runtime

        # Reconstruct target layout for fast-runtime and non-fast-runtime as required by Dockerfile-localnet
      - name: Reconstruct target layout
        run: |
          # Copy snapshot + script
          cp bin/fast-runtime/snapshot.json .
          cp bin/fast-runtime/localnet.sh scripts/localnet.sh
          chmod +x scripts/localnet.sh
      
          # Reconstruct fast-runtime
          mkdir -p target/fast-runtime/release/wbuild/node-subtensor-runtime
          cp bin/fast-runtime/node-subtensor target/fast-runtime/release/node-subtensor
          cp bin/fast-runtime/node_subtensor_runtime.compact.compressed.wasm \
             target/fast-runtime/release/wbuild/node-subtensor-runtime/node_subtensor_runtime.compact.compressed.wasm
      
          # Reconstruct non-fast-runtime
          mkdir -p target/non-fast-runtime/release/wbuild/node-subtensor-runtime
          cp bin/non-fast-runtime/node-subtensor target/non-fast-runtime/release/node-subtensor
          cp bin/non-fast-runtime/node_subtensor_runtime.compact.compressed.wasm \
             target/non-fast-runtime/release/wbuild/node-subtensor-runtime/node_subtensor_runtime.compact.compressed.wasm

      - name: Show current Git branch
        run: |
          echo "==============================="
          echo "Current Git branch:"
          git rev-parse --abbrev-ref HEAD
          echo "==============================="

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile-localnet
          build-args: |
            BUILT_IN_CI="Boom shakalaka"
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ghcr.io/${{ github.repository }}-localnet:${{ needs.setup.outputs.tag }}
            ${{ needs.setup.outputs.latest_tag == 'true' && format('ghcr.io/{0}-localnet:latest', github.repository) || '' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
